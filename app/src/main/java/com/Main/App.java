/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.Main;


import com.sun.speech.freetts.Voice;
import com.sun.speech.freetts.VoiceManager;
import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;

import java.io.IOException;
import java.util.List;

public class App {


    public static void main(String[] args) throws IOException {


        // Create a SpeechRecognizer for voice input
        Configuration configuration = new Configuration();
        configuration.setAcousticModelPath("resource:/edu/cmu/sphinx/models/en-us/en-us");
        configuration.setDictionaryPath("src/main/resources/4882.dic");
        configuration.setLanguageModelPath("src/main/resources/4882.lm");
        LiveSpeechRecognizer recognizer = new LiveSpeechRecognizer(configuration);


        // Create a FreeTTS Voice for text output
        System.setProperty("freetts.voices", "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
        Voice voice = VoiceManager.getInstance().getVoice("kevin16");
        voice.allocate();

        //is welcomed or not
        boolean isWelcomed = false;


        try {

            //At the beginning
            if (!isWelcomed) {
                voice.speak(Tools.getGreetings());
                Thread.sleep(2000);
                voice.speak("what can i do for you?");
                isWelcomed = true;
            }


            while (true) {
                System.out.println("Listening ...............");
                Thread.sleep(2000);
                recognizer.startRecognition(true);
                Thread.sleep(1000);
                String text = recognizer.getResult().getHypothesis();
                recognizer.stopRecognition();
                System.out.println("Listening Stopped............");

                if (Tools.in(text, "terminate")) {
                    break;
                }

                switch (text.toLowerCase()) {
                    case "open chrome" -> {
                        voice.speak("opening chrome");
                        new ProcessBuilder(List.of("cmd", "/c", "start chrome")).inheritIO().start().waitFor();
                    }
                    case "close chrome" -> {
                        voice.speak("closing chrome");
                        new ProcessBuilder(List.of("cmd", "/c", "taskill /im chrome.exe /f")).inheritIO().start().waitFor();
                    }
                    default -> {
                        voice.speak("invalid command" + text);
                    }
                }
                Thread.sleep(3000);


            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        voice.deallocate();
    }


}
